[
  {
    "Id": "1492193",
    "ThreadId": "661142",
    "Html": "I am trying to compile a stepper motor program that was provided by the same company. <br />\n<br />\nI've copied the header file into almost every place conceivable for the compiler to locate it (where the other *.h files are located too) and I'm still receiving the same error....unable to open the include file 'phidget.h'.<br />\n<br />\nthe code from the co is below and either the compiler is not able to manage the provided code, which is standard C or the header file is not being found. <br />\n<br />\nI tried to copy the header file but it's too large..(maybe that's the issue too?)... is there a limit with the compiler on the size of the header file....if someone needs to look at it the dropbox link is <a href=\"https://www.dropbox.com/s/o2k9tnl1puie66i/PHIDGET21.H?dl=0\" rel=\"nofollow\">https://www.dropbox.com/s/o2k9tnl1puie66i/PHIDGET21.H?dl=0</a><br />\n<br />\nIt's been 20 years since I've programmed so I'm way behind the curve here but perhaps I'm missing something simple.<br />\n<br />\nAny help is greatly appreciated. Brian<br />\n<pre><code>// This simple example sets up a Stepper object, hooks the event handlers and opens it for device connections.  \n// Once an Advanced Servo is attached it will move the motor to various positions.\n//\n// Please note that this example was designed to work with only one Phidget Stepper connected. \n//\n// Copyright 2008 Phidgets Inc.  All rights reserved.\n// This work is licensed under the Creative Commons Attribution 2.5 Canada License. \n// view a copy of this license, visit http://creativecommons.org/licenses/by/2.5/ca/\n\n#include &lt;stdio.h&gt;\n#include &lt;phidget21.h&gt;\n//#include &lt;unistd.h&gt;\n\nint CCONV AttachHandler(CPhidgetHandle stepper, void *userptr)\n{\n    int serialNo;\n    const char *name;\n\n    CPhidget_getDeviceName (stepper, &amp;name);\n    CPhidget_getSerialNumber(stepper, &amp;serialNo);\n    printf(&quot;%s %10d attached!\\n&quot;, name, serialNo);\n\n    return 0;\n}\n\nint CCONV DetachHandler(CPhidgetHandle stepper, void *userptr)\n{\n    int serialNo;\n    const char *name;\n\n    CPhidget_getDeviceName (stepper, &amp;name);\n    CPhidget_getSerialNumber(stepper, &amp;serialNo);\n    printf(&quot;%s %10d detached!\\n&quot;, name, serialNo);\n\n    return 0;\n}\n\nint CCONV ErrorHandler(CPhidgetHandle stepper, void *userptr, int ErrorCode, const char *Description)\n{\n    printf(&quot;Error handled. %d - %s\\n&quot;, ErrorCode, Description);\n    return 0;\n}\n\nint CCONV PositionChangeHandler(CPhidgetStepperHandle stepper, void *usrptr, int Index, __int64 Value)\n{\n    printf(&quot;Motor: %d &gt; Current Position: %lld\\n&quot;, Index, Value);\n    return 0;\n}\n\n//Display the properties of the attached phidget to the screen.  We will be displaying the name, serial number and version of the attached device.\nint display_properties(CPhidgetStepperHandle phid)\n{\n    int serialNo, version, numMotors;\n    const char* ptr;\n\n    CPhidget_getDeviceType((CPhidgetHandle)phid, &amp;ptr);\n    CPhidget_getSerialNumber((CPhidgetHandle)phid, &amp;serialNo);\n    CPhidget_getDeviceVersion((CPhidgetHandle)phid, &amp;version);\n\n    CPhidgetStepper_getMotorCount (phid, &amp;numMotors);\n\n    printf(&quot;%s\\n&quot;, ptr);\n    printf(&quot;Serial Number: %10d\\nVersion: %8d\\n# Motors: %d\\n&quot;, serialNo, version, numMotors);\n\n    return 0;\n}\n\nint stepper_simple()\n{\n    int result;\n    __int64 curr_pos;\n    const char *err;\n    double minAccel, maxVel;\n    int stopped;\n\n    //Declare an stepper handle\n    CPhidgetStepperHandle stepper = 0;\n\n    //create the stepper object\n    CPhidgetStepper_create(&amp;stepper);\n\n    //Set the handlers to be run when the device is plugged in or opened from software, unplugged or closed from software, or generates an error.\n    CPhidget_set_OnAttach_Handler((CPhidgetHandle)stepper, AttachHandler, NULL);\n    CPhidget_set_OnDetach_Handler((CPhidgetHandle)stepper, DetachHandler, NULL);\n    CPhidget_set_OnError_Handler((CPhidgetHandle)stepper, ErrorHandler, NULL);\n\n    //Registers a callback that will run when the motor position is changed.\n    //Requires the handle for the Phidget, the function that will be called, and an arbitrary pointer that will be supplied to the callback function (may be NULL).\n    CPhidgetStepper_set_OnPositionChange_Handler(stepper, PositionChangeHandler, NULL);\n\n    //open the device for connections\n    CPhidget_open((CPhidgetHandle)stepper, -1);\n\n    //get the program to wait for an stepper device to be attached\n    printf(&quot;Waiting for Phidget to be attached....&quot;);\n    if((result = CPhidget_waitForAttachment((CPhidgetHandle)stepper, 10000)))\n    {\n        CPhidget_getErrorDescription(result, &amp;err);\n        printf(&quot;Problem waiting for attachment: %s\\n&quot;, err);\n        return 0;\n    }\n\n    //Display the properties of the attached device\n    display_properties(stepper);\n\n    //read event data\n    printf(&quot;Reading.....\\n&quot;);\n\n    //This example assumes stepper motor is attached to index 0\n\n    //Set up some initial acceleration and velocity values\n    CPhidgetStepper_getAccelerationMin(stepper, 0, &amp;minAccel);\n    CPhidgetStepper_setAcceleration(stepper, 0, minAccel*2);\n    CPhidgetStepper_getVelocityMax(stepper, 0, &amp;maxVel);\n    CPhidgetStepper_setVelocityLimit(stepper, 0, maxVel/2);\n\n    //display current motor position if available\n    if(CPhidgetStepper_getCurrentPosition(stepper, 0, &amp;curr_pos) == EPHIDGET_OK)\n        printf(&quot;Motor: 0 &gt; Current Position: %lld\\n&quot;, curr_pos);\n\n    //keep displaying stepper event data until user input is read\n    printf(&quot;Press any key to continue\\n&quot;);\n    getchar();\n\n    //change the motor position\n    //we'll set it to a few random positions to move it around\n\n    //Step 1: Position 0 - also engage stepper\n    printf(&quot;Set to position 0 and engage. Press any key to Continue\\n&quot;);\n    getchar();\n\n    CPhidgetStepper_setCurrentPosition(stepper, 0, 0);\n    CPhidgetStepper_setEngaged(stepper, 0, 1);\n\n    //Step 2: Position 200\n    printf(&quot;Move to position 200. Press any key to Continue\\n&quot;);\n    getchar();\n\n    CPhidgetStepper_setTargetPosition (stepper, 0, 200);\n\n    //Step 3: Position -1200\n    printf(&quot;Move to position -1200. Press any key to Continue\\n&quot;);\n    getchar();\n\n    CPhidgetStepper_setTargetPosition (stepper, 0, -1200);\n\n    //Step 4: Set to 0, wait for it to reach position, Disengage\n    printf(&quot;Reset to 0 and disengage motor. Press any key to Continue\\n&quot;);\n    getchar();\n\n    CPhidgetStepper_setTargetPosition(stepper, 0, 0);\n\n    stopped = PFALSE;\n    while(!stopped)\n    {\n        CPhidgetStepper_getStopped(stepper, 0, &amp;stopped);\n        //usleep(100000);\n    }\n\n    CPhidgetStepper_setEngaged(stepper, 0, 0);\n\n    printf(&quot;Press any key to end\\n&quot;);\n    getchar();\n\n    //since user input has been read, this is a signal to terminate the program so we will close the phidget and delete the object we created\n    printf(&quot;Closing...\\n&quot;);\n    CPhidget_close((CPhidgetHandle)stepper);\n    CPhidget_delete((CPhidgetHandle)stepper);\n\n    //all done, exit\n    return 0;\n}\n\nint main(int argc, char* argv[])\n{\n    stepper_simple();\n    return 0;\n}\n</code></pre>\n\n",
    "PostedDate": "2017-02-04T07:48:41.487-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]